<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
ENV_FILE=app/env.json
#prepare environment
sed -e &quot;s,{{PROD_CHECKOUT_ENCRYPTION_PASS}},$PROD_CHECKOUT_ENCRYPTION_PASS,&quot; \
-e  &quot;s,{{NODE_BACKEND_USER}},$NODE_BACKEND_USER,&quot; \
-e  &quot;s,{{PROD_SALT_HASH_INVITE}},$PROD_SALT_HASH_INVITE,&quot; \
-e  &quot;s,{{PROD_VISAGE_ES_USER_NAME}},$PROD_VISAGE_ES_USER_NAME,&quot; \
-e  &quot;s,{{PROD_VISAGE_ES_USER_PWD}},$PROD_VISAGE_ES_USER_PWD,&quot; \
-e  &quot;s,{{FULL_CONTACT_API_KEY}},$FULL_CONTACT_API_KEY,&quot; \
-e  &quot;s,{{PROD_SENDY_API_KEY}},$PROD_SENDY_API_KEY,&quot; \
-e  &quot;s,{{PAYONEER_USERNAME}},$PAYONEER_USERNAME,&quot; \
-e  &quot;s,{{PAYONEER_PASSWORD}},$PAYONEER_PASSWORD,&quot; \
-e  &quot;s,{{PAYONEER_PARTNERID}},$PAYONEER_PARTNERID,&quot; \
-e  &quot;s,{{PROD_REDIS_PASSWORD}},$PROD_REDIS_PASSWORD,&quot; \
-e  &quot;s,{{INTERCOM_ACCESS_TOKEN}},$INTERCOM_ACCESS_TOKEN,&quot; \
-e  &quot;s,{{EMAIL_VERIFIER_API_KEY}},$EMAIL_VERIFIER_API_KEY,&quot; \
-e  &quot;s,{{SLACK_WEBHOOK_COMMITMENT}},$SLACK_WEBHOOK_COMMITMENT,&quot; \
-e  &quot;s,{{SLACK_WEBHOOK_FEEDBACK}},$SLACK_WEBHOOK_FEEDBACK,&quot; \
-e  &quot;s,{{SLACK_WEBHOOK_JOBACTIONS}},$SLACK_WEBHOOK_JOBACTIONS,&quot; \
-e  &quot;s,{{SLACK_WEBHOOK_NEW_CUSTOMER}},$SLACK_WEBHOOK_NEW_CUSTOMER,&quot; \
-e  &quot;s,{{SLACK_WEBHOOK_NEW_USER}},$SLACK_WEBHOOK_NEW_USER,&quot; \
-e  &quot;s,{{JWT_CLIENT_ID}},$JWT_CLIENT_ID,&quot; \
-e  &quot;s,{{JWT_SECRET}},$JWT_SECRET,&quot; \
-e  &quot;s,{{FO_HOST}},$PROD_FO_HOST,&quot; \
-e  &quot;s,{{BO_HOST}},$PROD_BO_HOST,&quot; -i.bak ${ENV_FILE}</command>
    </hudson.tasks.Shell>
    <com.cloudbees.dockerpublish.DockerBuilder plugin="docker-build-publish@1.3.2">
      <server plugin="docker-commons@1.8"/>
      <registry plugin="docker-commons@1.8"/>
      <repoName>dalekurt/api</repoName>
      <noCache>false</noCache>
      <forcePull>true</forcePull>
      <skipBuild>false</skipBuild>
      <skipDecorate>false</skipDecorate>
      <repoTag>$VERSION_NUMBER</repoTag>
      <skipPush>false</skipPush>
      <createFingerprint>true</createFingerprint>
      <skipTagLatest>false</skipTagLatest>
      <buildAdditionalArgs></buildAdditionalArgs>
      <forceTag>false</forceTag>
    </com.cloudbees.dockerpublish.DockerBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
CLUSTER_NAME=visage-api-cluster-prod

set -e

#Set the credentials to be able to pull from private directory and deploy the services
EXTRA_ECS_CONFIG=&quot;ECS_CLUSTER=${CLUSTER_NAME}\nECS_ENGINE_AUTH_TYPE=dockercfg\nECS_ENGINE_AUTH_DATA={\&quot;https://index.docker.io/v1/\&quot;:{\&quot;auth\&quot;:\&quot;YWRtaW52aXNhZ2U6MjMmJl9PanVs\&quot;,\&quot;email\&quot;:\&quot;adminvisage\&quot;}}&quot;
REGION=us-west-2
KEY_FILE=/var/lib/jenkins/cluster-a-key.pem
echo $EXTRA_ECS_CONFIG

print_instance_ips() {
    INSTANCE_ARNS=$(aws --region $REGION ecs list-container-instances --cluster $CLUSTER_NAME --query &apos;containerInstanceArns[*]&apos; --output text)
    INSTANCE_IDS=$(aws --region $REGION ecs describe-container-instances --cluster $CLUSTER_NAME --container-instances $INSTANCE_ARNS --query &apos;containerInstances[*].ec2InstanceId&apos; --output text)
    aws --region $REGION ec2 describe-instances --instance-ids $INSTANCE_IDS --query &apos;Reservations[*].Instances[*].PublicIpAddress&apos; --output text
}

/usr/local/bin/ecs-cli configure --region $REGION --cluster $CLUSTER_NAME
echo -n &quot;Waiting for instances to be up to add auth credentials (this may take a while) ...&quot;
while ! INSTANCE_IPS=$(print_instance_ips 2&gt; /dev/null) ||
        [ &quot;$(echo $INSTANCE_IPS | wc -w)&quot; -ne $CLUSTER_SIZE ] ; do
    sleep 5
done
echo &quot;done&quot;
SSH_ARGS=&quot;-i $KEY_FILE -o StrictHostKeyChecking=no ec2-user@&quot;
echo $KEY_FILE
echo $SSH_ARGS
for IP in $INSTANCE_IPS; do
    echo $IP
#delete old default and auth cluster configuration don&apos;t fail if nothing to remove
    ssh $SSH_ARGS$IP -t -t sudo bash -c &quot;&apos;sudo rm /var/lib/ecs/data/ecs_agent_data.json || true&apos;&quot;
    ssh $SSH_ARGS$IP -t -t sudo bash -c &quot;&apos;echo -e $(printf %q $EXTRA_ECS_CONFIG)  &gt; /etc/ecs/ecs.config&apos;&quot;
#don&apos;t fail if nothing to stop    
    ssh $SSH_ARGS$IP -t -t sudo bash -c &quot;&apos;sudo stop ecs || true&apos;&quot;
    ssh $SSH_ARGS$IP -t -t sudo start ecs
#wait for ecs agent to start properly
    n=0
    until [ $n -ge 5 ]
    do
      ssh $SSH_ARGS$IP -t -t curl http://localhost:51678/v1/metadata &amp;&amp; break
      n=$[$n+1]
      sleep 2
    done
done
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <EnvInjectBuildWrapper plugin="envinject@2.1.3">
      <info>
        <scriptContent>#!/bin/bash
echo  &quot;VERSION_NUMBER=&quot;$(cat package.json | grep version | awk &apos;{print $2}&apos; | sed -e &apos;s/&quot;//g&apos; -e &quot;s/&apos;//g&quot; -e &apos;s/,//g&apos; ) &gt; version.properties</scriptContent>
        <secureGroovyScript plugin="script-security@1.34">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>